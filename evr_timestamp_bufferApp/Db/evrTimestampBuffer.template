#########################################
#	TDC 				#
#########################################	
# AI to start processing the TDC timestamp
record(ai, "$(SYS)$(DRIVEID)TDCProc")
{
    field(DESC, "Start processing the TDC record")
    field(INP,  "$(TDC_EVENT_LINK) CPP")
    field(FLNK, "$(SYS)$(DRIVEID)TDC_Epics.PROC")
}

# Convert revolution interrupt timestamp from chopper to double
record(ai, "$(SYS)$(DRIVEID)TDC_Epics")
{
    field(DESC, "EPICS epoch TDC timestamp")
    field(TSEL, "$(TDC_EVENT_LINK).TIME")
    field(DTYP, "Soft Timestamp")
    field(FLNK, "$(SYS)$(DRIVEID)TDC_Unix_stringin.PROC")
}

# Convert revolution interrupt timestamp from chopper to double
record(stringin, "$(SYS)$(DRIVEID)TDC_Unix_stringin")
{
    field(DESC, "Timestamp of the TDC")
    field(INP,  "@%s.%09f")
    field(TSEL, "$(TDC_EVENT_LINK).TIME")
    field(DTYP, "Soft Timestamp")
    field(FLNK, "$(SYS)$(DRIVEID)TDC_Unix_asub")
}

record(aSub, "$(SYS)$(DRIVEID)TDC_Unix_asub")
{
    field(DESC, "Timestamp, output A sec, output B nsec")
    field(SNAM, "nano_second_timestamp")
    field(INPA, "$(TDC_EVENT_LINK)")
    field(FTVA, "LONG")
    field(FTVB, "LONG")
    field(FTVC, "LONG")
    field(FTVD, "INT64")
    field(NOVA, "1")
    field(FLNK, "$(SYS)$(DRIVEID)TDC_Unix.PROC")
}

# Unix Epoch TDC
record(ai, "$(SYS)$(DRIVEID)TDC_Unix")
{
    field(DESC, "Unix epoch TDC timestamp")
    field(INP,  "$(SYS)$(DRIVEID)TDC_Unix_stringin")
    field(DTYP, "Soft Channel")
    field(FLNK, "$(SYS)$(DRIVEID)TDC_Fanout_buffer")
}

# Reset the timestamp array on beam pulse interrupt
record(bo, "$(SYS)$(DRIVEID)TDC_RST")
{
    field(DESC, "Reset timestamp array")
    field(OUT,  "$(SYS)$(DRIVEID)TDC_buffer.RES NPP")
}

# Provide seconds and nanoseconds to buffer.
# Every even buffer element is seconds,
# every uneven buffer element is nanoseconds

record(fanout, "$(SYS)$(DRIVEID)TDC_Fanout_buffer")
{
    field(DESC, "Load seconds and nanoseconds in buffer")
    field(LNK1, "$(SYS)$(DRIVEID)TDC_Buffer_calc")
    field(LNK2, "$(SYS)$(DRIVEID)TDC_buffer")
    field(LNK3, "$(SYS)$(DRIVEID)TDC_Buffer_calc")
    field(LNK4, "$(SYS)$(DRIVEID)TDC_buffer")
}

record(calc, "$(SYS)$(DRIVEID)TDC_Buffer_calc")
{
    field(DESC, "Provide buffer with secs and nsecs")
    field(INPA, "$(SYS)$(DRIVEID)TDC_Unix_asub.VALA")
    field(INPB, "$(SYS)$(DRIVEID)TDC_Unix_asub.VALB")
    field(INPC, "$(SYS)$(DRIVEID)TDC_buffer.NUSE")
    field(CALC, "C%2?B:A")
}

# Compress records used as circual buffer to store chopper timestamps 
# in between beam pulses.
# Note that TSARR_N has to be set strictly greater than chopper frequency
# divided by beam pulse frequency.
record(compress, "$(SYS)$(DRIVEID)TDC_buffer")
{
    field(DESC, "Current chopper seconds array")
    field(NSAM, "$(TSARR_N)")
    field(ALG,  "Circular Buffer")
    field(INP,  "$(SYS)$(DRIVEID)TDC_Buffer_calc.VAL")
    field(TSEL, "$(TDC_EVENT_LINK).TIME")
}

# Final timestamp array from chopper interrupt, 
# valid until next beampulse intterupt.
record(waveform, "$(SYS)$(DRIVEID)TDC_array")
{
    field(DESC, "Buffer for Chopper TDC")
    field(DTYP, "TDC")
    field(INP,  "$(SYS)$(DRIVEID)TDC_buffer NPP")
    field(FTVL, "LONG")
    field(NELM, "$(TSARR_N)")
    field(TSEL, "$(BEAMPULSE_EVENT_LINK).TIME")
}


#########################################
#	REF 				#
#########################################	
# AI to start processing the beam pulse timestamp
record(ai, "$(SYS)$(DRIVEID)RefProc")
{
    field(DESC, "Start processing the beampulse record")
    field(INP,  "$(BEAMPULSE_EVENT_LINK) CPP")
    field(FLNK, "$(SYS)$(DRIVEID)Ref_Unix_asub.PROC")
}

record(aSub, "$(SYS)$(DRIVEID)Ref_Unix_asub")
{
    field(DESC, "Timestamp in nano seconds")
    field(SNAM, "nano_second_timestamp")
    field(INPA, "$(BEAMPULSE_EVENT_LINK)")
    field(FTVA, "LONG")
    field(FTVB, "LONG")
    field(FTVC, "LONG")
    field(FTVD, "LONG")
    field(FTVE, "LONG")
    field(FTVF, "LONG")
    field(NOVA, "1")
    field(FLNK, "$(SYS)$(DRIVEID)Ref_Epics.PROC")
}

# AI to convert Ref timestamp to value
record(ai, "$(SYS)$(DRIVEID)Ref_Epics")
{
    field(DESC, "Timestamp of the beam pulse")
    field(TSEL,  "$(BEAMPULSE_EVENT_LINK).TIME")
    field(DTYP, "Soft Timestamp")
    field(FLNK, "$(SYS)$(DRIVEID)Ref_Unix_stringin.PROC")
}

record(stringin, "$(SYS)$(DRIVEID)Ref_Unix_stringin")
{
    field(DESC, "Timestamp of the Ref")
    field(INP,  "@%s.%09f")
    field(TSEL, "$(BEAMPULSE_EVENT_LINK).TIME")
    field(DTYP, "Soft Timestamp")
    field(FLNK, "$(SYS)$(DRIVEID)Ref_Unix.PROC")
}

# Beampulse timestamp
# Needs forward link from softEvent template of beam pulse event.
record(ai, "$(SYS)$(DRIVEID)Ref_Unix")
{
    field(DESC, "Timestamp of the beam pulse")
    field(INP,  "$(SYS)$(DRIVEID)Ref_Unix_stringin")
    field(DTYP, "Soft Channel")
    field(FLNK, "$(SYS)$(DRIVEID)BPFO")
}

# Beampulse fanout: store timestamp array in waveform
# then reset current timestamp array.
record(fanout, "$(SYS)$(DRIVEID)BPFO")
{
    field(LNK1, "$(SYS)$(DRIVEID)TDC_array")
    field(LNK2, "$(SYS)$(DRIVEID)TDC_RST")
    field(LNK3, "$(SYS)$(DRIVEID)Ref_Fanout_buffer")
    field(LNK4, "$(SYS)$(DRIVEID)Ref_RST")
}

# Reset the timestamp array on beam pulse interrupt
record(bo, "$(SYS)$(DRIVEID)Ref_RST")
{
    field(DESC, "Reset timestamp array")
    field(OUT,  "$(SYS)$(DRIVEID)Ref_buffer.RES NPP")
}

record(fanout, "$(SYS)$(DRIVEID)Ref_Fanout_buffer")
{
    field(DESC, "Load seconds and nanoseconds in buffer")
    field(LNK1, "$(SYS)$(DRIVEID)Ref_Buffer_calc")
    field(LNK2, "$(SYS)$(DRIVEID)Ref_buffer")
    field(LNK3, "$(SYS)$(DRIVEID)Ref_Buffer_calc")
    field(LNK4, "$(SYS)$(DRIVEID)Ref_buffer")
    field(LNK5, "$(SYS)$(DRIVEID)Ref_array")
}
        
record(calc, "$(SYS)$(DRIVEID)Ref_Buffer_calc")
{
    field(DESC, "Provide buffer with secs and nsecs")
    field(INPA, "$(SYS)$(DRIVEID)Ref_Unix_asub.VALA")
    field(INPB, "$(SYS)$(DRIVEID)Ref_Unix_asub.VALB")
    field(INPC, "$(SYS)$(DRIVEID)Ref_buffer.NUSE")
    field(CALC, "C%2?B:A")
}

# Compress records used as circual buffer to store chopper timestamps 
# in between beam pulses.
# Note that TSARR_N has to be set strictly greater than chopper frequency
# divided by beam pulse frequency.
record(compress, "$(SYS)$(DRIVEID)Ref_buffer")
{
    field(DESC, "Buffer for Ref timestamp ")
    field(NSAM, "$(TSARR_N)")
    field(ALG,  "Circular Buffer")
    field(INP,  "$(SYS)$(DRIVEID)Ref_Buffer_calc.VAL")
    field(TSEL, "$(BEAMPULSE_EVENT_LINK).TIME")
}

# Final timestamp array from chopper interrupt, 
# valid until next beampulse intterupt.
record(waveform, "$(SYS)$(DRIVEID)Ref_array")
{
    field(DESC, "Chopper epoch seconds array")
    field(DTYP, "TDC")
    field(INP,  "$(SYS)$(DRIVEID)Ref_buffer NPP")
    field(FTVL, "LONG")
    field(NELM, "$(TSARR_N)")
    field(TSEL, "$(BEAMPULSE_EVENT_LINK).TIME")
}
